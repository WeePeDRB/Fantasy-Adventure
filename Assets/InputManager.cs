//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/InputManager.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputManager: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputManager()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputManager"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""2548c3a1-51ec-47a7-b8b3-d62437f5fd7c"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""b6a0d5bf-ab0f-4dcf-9425-0e0505f4d2a7"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""DashSkill"",
                    ""type"": ""Button"",
                    ""id"": ""8366ec1c-2c07-4fbc-a1c6-1a27ccd2efce"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SpecialSkill"",
                    ""type"": ""Button"",
                    ""id"": ""c0638e24-44f4-448e-907c-8575ca380f3c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UltimateSkill"",
                    ""type"": ""Button"",
                    ""id"": ""168c7323-2c1b-4366-8043-61e09bcec3b4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UseItem1"",
                    ""type"": ""Button"",
                    ""id"": ""60634c83-3335-4c48-84e1-8469503a52a1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UseItem2"",
                    ""type"": ""Button"",
                    ""id"": ""9d8d8251-fff1-4f3a-8cc0-73e6776b978d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UseItem3"",
                    ""type"": ""Button"",
                    ""id"": ""faf6ab09-6ff2-4c23-99a2-d6c483e90421"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Arrows"",
                    ""id"": ""9f7d0769-aa81-4a01-a0e3-8ffefe8a256d"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""016312ce-f04c-4d60-9c27-2631404460ec"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""1f9f551f-5b8d-4934-b92e-055a43896744"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""392460fc-4074-41d0-ad1b-e629f1ab85fe"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""38a81b72-4bde-4556-b93d-6f4dfd9d629e"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""67c1656d-e79a-443d-8183-e472e8d98183"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a390f297-5f2e-415a-a1d6-467a595db2ce"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DashSkill"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c6895804-1a42-41a9-b6cc-ce23e2100b66"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SpecialSkill"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b27fac26-c5d8-4ccd-af94-550b14b59616"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UltimateSkill"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f8a6b400-6b9b-4b67-9727-e7630d91402e"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UseItem1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ef826892-cf10-45ab-8ebe-3a50c62da87e"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UseItem2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dead63e3-c4b9-439e-b9ab-4c24bf55ffa2"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UseItem3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Move = m_Player.FindAction("Move", throwIfNotFound: true);
        m_Player_DashSkill = m_Player.FindAction("DashSkill", throwIfNotFound: true);
        m_Player_SpecialSkill = m_Player.FindAction("SpecialSkill", throwIfNotFound: true);
        m_Player_UltimateSkill = m_Player.FindAction("UltimateSkill", throwIfNotFound: true);
        m_Player_UseItem1 = m_Player.FindAction("UseItem1", throwIfNotFound: true);
        m_Player_UseItem2 = m_Player.FindAction("UseItem2", throwIfNotFound: true);
        m_Player_UseItem3 = m_Player.FindAction("UseItem3", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_Move;
    private readonly InputAction m_Player_DashSkill;
    private readonly InputAction m_Player_SpecialSkill;
    private readonly InputAction m_Player_UltimateSkill;
    private readonly InputAction m_Player_UseItem1;
    private readonly InputAction m_Player_UseItem2;
    private readonly InputAction m_Player_UseItem3;
    public struct PlayerActions
    {
        private @InputManager m_Wrapper;
        public PlayerActions(@InputManager wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Player_Move;
        public InputAction @DashSkill => m_Wrapper.m_Player_DashSkill;
        public InputAction @SpecialSkill => m_Wrapper.m_Player_SpecialSkill;
        public InputAction @UltimateSkill => m_Wrapper.m_Player_UltimateSkill;
        public InputAction @UseItem1 => m_Wrapper.m_Player_UseItem1;
        public InputAction @UseItem2 => m_Wrapper.m_Player_UseItem2;
        public InputAction @UseItem3 => m_Wrapper.m_Player_UseItem3;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @DashSkill.started += instance.OnDashSkill;
            @DashSkill.performed += instance.OnDashSkill;
            @DashSkill.canceled += instance.OnDashSkill;
            @SpecialSkill.started += instance.OnSpecialSkill;
            @SpecialSkill.performed += instance.OnSpecialSkill;
            @SpecialSkill.canceled += instance.OnSpecialSkill;
            @UltimateSkill.started += instance.OnUltimateSkill;
            @UltimateSkill.performed += instance.OnUltimateSkill;
            @UltimateSkill.canceled += instance.OnUltimateSkill;
            @UseItem1.started += instance.OnUseItem1;
            @UseItem1.performed += instance.OnUseItem1;
            @UseItem1.canceled += instance.OnUseItem1;
            @UseItem2.started += instance.OnUseItem2;
            @UseItem2.performed += instance.OnUseItem2;
            @UseItem2.canceled += instance.OnUseItem2;
            @UseItem3.started += instance.OnUseItem3;
            @UseItem3.performed += instance.OnUseItem3;
            @UseItem3.canceled += instance.OnUseItem3;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @DashSkill.started -= instance.OnDashSkill;
            @DashSkill.performed -= instance.OnDashSkill;
            @DashSkill.canceled -= instance.OnDashSkill;
            @SpecialSkill.started -= instance.OnSpecialSkill;
            @SpecialSkill.performed -= instance.OnSpecialSkill;
            @SpecialSkill.canceled -= instance.OnSpecialSkill;
            @UltimateSkill.started -= instance.OnUltimateSkill;
            @UltimateSkill.performed -= instance.OnUltimateSkill;
            @UltimateSkill.canceled -= instance.OnUltimateSkill;
            @UseItem1.started -= instance.OnUseItem1;
            @UseItem1.performed -= instance.OnUseItem1;
            @UseItem1.canceled -= instance.OnUseItem1;
            @UseItem2.started -= instance.OnUseItem2;
            @UseItem2.performed -= instance.OnUseItem2;
            @UseItem2.canceled -= instance.OnUseItem2;
            @UseItem3.started -= instance.OnUseItem3;
            @UseItem3.performed -= instance.OnUseItem3;
            @UseItem3.canceled -= instance.OnUseItem3;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    public interface IPlayerActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnDashSkill(InputAction.CallbackContext context);
        void OnSpecialSkill(InputAction.CallbackContext context);
        void OnUltimateSkill(InputAction.CallbackContext context);
        void OnUseItem1(InputAction.CallbackContext context);
        void OnUseItem2(InputAction.CallbackContext context);
        void OnUseItem3(InputAction.CallbackContext context);
    }
}
